<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Blog Title</title>
  <subtitle>This is a longer description about your blog.</subtitle>
  <link href="https://websiteaboutmy.website/feed/feed.xml" rel="self" />
  <link href="https://websiteaboutmy.website/" />
  <updated>2025-03-21T00:00:00Z</updated>
  <id>https://websiteaboutmy.website/</id>
  <author>
    <name>Your Name</name>
  </author>
  <entry>
    <title>Recurse: W5D5</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w5d5/" />
    <updated>2025-03-21T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w5d5/</id>
    <content type="html">&lt;h1 id=&quot;recurse-w5d5-update&quot;&gt;Recurse W5D5 update&lt;/h1&gt;
&lt;p&gt;Other than mostly fighting a bad cold the past week, made some progress on adding some features to my game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adds some terrain features from the server, for synchronization among all clients&lt;/li&gt;
&lt;li&gt;Add an isometric camera perspective&lt;/li&gt;
&lt;li&gt;Add more natural movement (in the isometric perspective)&lt;/li&gt;
&lt;li&gt;Camera following the player&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s a demo&lt;/p&gt;
&lt;p id=&quot;w5d5-demo-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
    W5D5 multiplayer game demo
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;w5d5-demo-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w5d5/w5d5-demo.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;And here&#39;s &lt;a href=&quot;https://github.com/etgrieco/game-ws-multiplayer-experiment/tree/648a510dad76629d44018ece412c9b1fb1cbb781&quot;&gt;the snapshot&lt;/a&gt; of where I&#39;m at.&lt;/p&gt;
&lt;p&gt;Challenges during this part were getting the isometric orientation and orthographic camera right. Using the &lt;a href=&quot;https://github.com/pmndrs/leva&quot;&gt;leva library&lt;/a&gt; helped a lot for making quick changes and getting some intuition around moving around the 3D space.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W5D2</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w5d2/" />
    <updated>2025-03-18T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w5d2/</id>
    <content type="html">&lt;h1 id=&quot;recurse-w5d2&quot;&gt;Recurse - W5D2&lt;/h1&gt;
&lt;p&gt;Another check-in about today, and hopefully some catch up since &lt;a href=&quot;https://websiteaboutmy.website/blog/recurse-w5d2/recurse-w4d1&quot;&gt;the last one&lt;/a&gt; as well!&lt;/p&gt;
&lt;p&gt;My goal last week was to get the multiplayer project to be robust and recoverable across &#39;lost signals&#39;. It&#39;s not 100% , but it definitely recovers and handles HMR elegantly across many cases, including client and server restarts.&lt;/p&gt;
&lt;p&gt;Here&#39;s a demo:&lt;/p&gt;
&lt;p id=&quot;multiplayer-game-demo-w5d2-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
  Demo of multiplayer game project, W5D2
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;multiplayer-game-demo-w5d2-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w5d2/w5d2-demo-lost-signals-demo.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Here&#39;s a snapshot of &lt;a href=&quot;https://github.com/etgrieco/game-ws-multiplayer-experiment/tree/0e3bbd75f50e7454cd0158a945c6da6b3a86c147&quot;&gt;where I&#39;m currently at with the project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some new things I learned today while adding features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controls, with &lt;a href=&quot;https://github.com/pmndrs/leva/&quot;&gt;leva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An orbital control camera, and other niceties, with &lt;a href=&quot;https://github.com/pmndrs/drei&quot;&gt;drei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLtzt35QOXmkKkZL63E3IXDxqvP13MHyTE&quot;&gt;Followed along with this playlist&lt;/a&gt; as inspiration for setting up cameras, flat terrain plains, etc. It&#39;s written in non-React Three.JS, plus taking on the additional challenge of having things work in a multiplayer (server/client) setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also went through with a refactor to potentially allow for &amp;gt;2 players, in case a gameplay idea comes out of that. It also gives me some more flexibility in how I handle sending updates from the server; for example, I may only update some players, not all, per-update message send.&lt;/p&gt;
&lt;h2 id=&quot;looking-back&quot;&gt;Looking back --&lt;/h2&gt;
&lt;p&gt;Since last week, the major improvements were primarily around the organization of the web socket state machine, both on web and server. It&#39;s still a quite &#39;loose&#39; state machine at this point, and potentially prone to unexpected behaviors. I wanted some flexibility still at this point, but basically I organized my states as follows:&lt;/p&gt;
&lt;p&gt;The state of the game, according to the client:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GameMachineState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;INIT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SESSION_CONNECTED_WITH_GAME_PLAYING&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SESSION_CONNECTED_WITH_GAME_READY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SESSION_CONNECTED_WITH_GAME_WAITING_PLAYER&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;Transitions&amp;quot;/events that can be triggered by the server, and cause changes between these states&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MultiplayerGameStatus&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;PAUSED_AWAITING_START&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;PAUSED_AWAITING_PLAYERS&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;PLAYING&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which come packaged in updates like:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GAME_STATUS_UPDATE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sessionId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    gameStatus&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MultiplayerGameStatus&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I should perhaps think on if there&#39;s a mistake here -- is it worth it to unify the state definitions between client and server? That may make things a bit simpler to follow as the application grows.&lt;/p&gt;
&lt;p&gt;But that would require another refactor, and may push forward on adding gameplay features instead, and return back to this part as a cleanup later.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W4D1</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w4d1/" />
    <updated>2025-03-10T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w4d1/</id>
    <content type="html">&lt;h1 id=&quot;recurse-w4d1&quot;&gt;Recurse - W4D1&lt;/h1&gt;
&lt;p&gt;Haven&#39;t checked in most of last week.&lt;/p&gt;
&lt;p&gt;The theme of a game jam started within Recurse is &amp;quot;Lost Signals&amp;quot; -- building on some work from &amp;quot;impossible day&amp;quot;, I am going to focus on getting a good framework setup for multiplayer connectivity. I want it to be robust as the game reloads (due to HMR development), in addition to having resiliency when a websocket connection breaks.&lt;/p&gt;
&lt;p&gt;Here&#39;s a snapshot of &lt;a href=&quot;https://github.com/etgrieco/game-ws-multiplayer-experiment/tree/0971080d106bba81a002d1d4c56d1bd66ba6656c&quot;&gt;where I&#39;m currently at with the project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a quick demo of what works, as-is:&lt;/p&gt;
&lt;p id=&quot;multiplayer-game-demo-w4d1-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
  Demo of multiplayer game project, W4D1
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;multiplayer-game-demo-w4d1-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w4d1/w4d1-demo.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Unfortunately, this one is not online yet, as it requires a websocket server up to work!&lt;/p&gt;
&lt;p&gt;Here are some cool &#39;lost signals connections&#39; that do work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when a client disconnects or refreshes, it can reconnect to the active session&lt;/li&gt;
&lt;li&gt;when the server closes, it dumps a JSON snapshot of the currently running games so they can be restore and resumed&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W3D1</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w3d1/" />
    <updated>2025-03-03T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w3d1/</id>
    <content type="html">&lt;h1 id=&quot;recurse-w3d1&quot;&gt;Recurse - W3D1&lt;/h1&gt;
&lt;p&gt;Today I iterated on my &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota&quot;&gt;space invaders game&lt;/a&gt; to learn some new skills working with Three.js&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;l&lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/blob/a2aba95d68f9db8be7fcabd687e7c0666778bf51/src/main.ts#L16-L26&quot;&gt;oad custom assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scale those custom assets properly to the game engine&lt;/li&gt;
&lt;li&gt;Refine 3d collision handling&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/blob/a2aba95d68f9db8be7fcabd687e7c0666778bf51/src/main.ts#L40-L42&quot;&gt;make some basic scene lighting&lt;/a&gt; (for the custom asset)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this was about getting to grips with more confort with dealing with numbers and entities in 3D space. At this point, I&#39;m pretty satisfied with space invaders as a learning exercise, both for orchestrating a game engine/logic in general, and also for learning some basics of 3D programming.&lt;/p&gt;
&lt;p&gt;A snapshot of the product can be &lt;a href=&quot;https://websiteaboutmy.website/blog-assets/recurse-w3d1/space-invaders-demo/index.html&quot;&gt;played here&lt;/a&gt; (arrows, move; &amp;quot;v&amp;quot; to shoot)&lt;/p&gt;
&lt;p id=&quot;space-invaders-demo-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
  Space invaders demo at end of day W31D1
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;space-invaders-demo-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w3d1/space-invaders-demo-w3d1.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W2D5</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w2d5/" />
    <updated>2025-02-28T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w2d5/</id>
    <content type="html">&lt;h1 id=&quot;w2d5&quot;&gt;W2D5&lt;/h1&gt;
&lt;p&gt;Today I took on one of the ideas I thought about yesterday -- moving the game to another rending engine.&lt;/p&gt;
&lt;p&gt;I decided that the next step in my journey would be seeing how well the game ported over to a 3d engine -- &lt;a href=&quot;https://threejs.org/&quot;&gt;three.js&lt;/a&gt;. Here is a snapshot of &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/commit/c1c14b43a2e9a035a740a9e7369c0aff14655ea8&quot;&gt;all those changes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The biggest thing I had trouble with the two different drawing models -- p5.js basically had me clearing the canvas and re-drawing every frame. For three.js, I had to perform per-frame updates to underlying object meshes. What I ended up doing was attaching the meshes to the entities directly, and performing a separate &amp;quot;mesh draw&amp;quot; system for these. Ultimately, the most vital thing to do was updates to position over time. Other properties, such as rotation, are not currently tracked in the game engine, but could be added later.&lt;/p&gt;
&lt;p&gt;The other thing I had trouble with was that the coordinate systems are completely different -- as a result, I either have to 1) do some kind of transformation during the draw logic to the &#39;coordinate assumptions&#39; underlying all of my logic or 2) completely re-write the position logic to fit this new system.&lt;/p&gt;
&lt;p&gt;For now, I just let the problem exist as-is 🙃 -- &lt;a href=&quot;https://websiteaboutmy.website/blog-assets/recurse-w2d5/space-invaders-demo&quot;&gt;you can play the work-in-progress I ended the day with here&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;space-invaders-demo-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
  Space invaders demo at end of day W2D5
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;space-invaders-demo-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w2d5/space-invaders-demo-w2d5.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W2D4</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w2d4/" />
    <updated>2025-02-27T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w2d4/</id>
    <content type="html">&lt;h1 id=&quot;recurse-center-w2d4&quot;&gt;Recurse center: W2D4&lt;/h1&gt;
&lt;p&gt;After getting into the basics of &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;ECS&lt;/a&gt; and &lt;a href=&quot;https://github.com/pmndrs/koota&quot;&gt;koota&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of my coding time was dedicated towards doing some maintenance and general code pattern making around organizing the parts.&lt;/p&gt;
&lt;p&gt;Turns out the simplest way to go about it is to segregate Entity-Component-System by entity, component (&amp;quot;trait&amp;quot;s), and system definitions.&lt;/p&gt;
&lt;p&gt;All changes made for the koota migration are captured &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/pull/1&quot;&gt;in this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, the &amp;quot;main&amp;quot; method for our game simulation is now organized as follows&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the game simulation is started, &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/blob/25097131c24478922eb1637e865c0bb77af8e12d/src/scenes/gameSimulation.ts#L87-L147&quot;&gt;do some one-off resource creation&lt;/a&gt;. This includes setting up listening for the controller inputs, setting up basic level entities, and setting up the initial state&lt;/li&gt;
&lt;li&gt;Set up a method for every tick. Every tick, &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/blob/25097131c24478922eb1637e865c0bb77af8e12d/src/scenes/gameSimulation.ts#L170-L212&quot;&gt;run through each of the systems&lt;/a&gt; to perform updates on the underlying components per-entity. Concepts that are beginning to merge are &amp;quot;game logic systems&amp;quot; and &amp;quot;draw&amp;quot; systems. The game logic systems depends upon the game state only, and is about making changes to that game state. The &amp;quot;draw&amp;quot; systems then take this processed game state, and determines what to draw on the screen based on this info.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While improving basic code organization, some logic was improved as well -- I learned about &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_bounding_rectangle&quot;&gt;axis-aligned bounding boxes&lt;/a&gt;, and this was a rather quick way to get collision detection working. I&#39;m happy overall that the bounding box and drawing logic are completely independent of one-another, which feels much better than where I was with working on binary sort a week ago.&lt;/p&gt;
&lt;h2 id=&quot;some-things-i-m-unhappy-about&quot;&gt;Some things I&#39;m unhappy about&lt;/h2&gt;
&lt;p&gt;Thinking through what I should do with &amp;quot;systems&amp;quot; &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/blob/25097131c24478922eb1637e865c0bb77af8e12d/src/scenes/gameSimulation/adhocSystems.ts#L17&quot;&gt;like this&lt;/a&gt;. Here, I am simply calling it an &#39;adhoc&#39; system, and having it operate on a single entity. As designed, functions that receive an entity alone are kind of weird, and probably an anti-pattern. There are &#39;hidden&#39; parts of the contract as-is that say &amp;quot;oh, by the way this better be a &lt;code&gt;Position&lt;/code&gt; and &lt;code&gt;Velocity&lt;/code&gt;-based entity, or this won&#39;t work. These are all code-smells to me.&lt;/p&gt;
&lt;p&gt;Perhaps the solution is -- turn everything into a system, even if it feels like a one-off. Think if there&#39;s some kind of extractable behavior. For example, perhaps there is something like a &#39;route&#39; that this entity should follow, and there&#39;s a systemic relationship between &#39;routes&#39;, &#39;positions&#39;, and velocities? Perhaps it is really that simple. I&#39;ll give it a shot tomorrow.&lt;/p&gt;
&lt;p&gt;On the one hand, in these ambiguous one-off cases, I&#39;m happy to leave it alone. Gives me time to find the right abstraction.&lt;/p&gt;
&lt;p&gt;The nice thing here, at least, is that the wrong abstraction does not appear to be as &#39;expensive&#39; as when the same wrong abstraction is selected for in OOP.&lt;/p&gt;
&lt;h2 id=&quot;some-things-to-work-on-tomorrow&quot;&gt;Some things to work on tomorrow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Look into turning swarm behavior into a system&lt;/li&gt;
&lt;li&gt;Fix controls by using an input queue and handle inputs per-tick&lt;/li&gt;
&lt;li&gt;Add some interesting effects, especially lighting
&lt;ul&gt;
&lt;li&gt;since the game logic is completely de-coupled from the view, consider experimenting with other drawing strategies?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;update koota to 0.2.0. I &lt;a href=&quot;https://github.com/pmndrs/koota/issues/54&quot;&gt;posted an issue&lt;/a&gt; today, which got fixed by this release.&lt;/li&gt;
&lt;li&gt;Perhaps create a github action for building and publishing assets per-merge to main, for long-term tracking of progress&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;some-things-on-the-horizon&quot;&gt;Some things on the horizon&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Recurse&#39;s &amp;quot;impossible&amp;quot; day. Is that when some kind of client-server interaction should be handled&lt;/li&gt;
&lt;li&gt;A game jam -- a game jame is being scheduled for sometime next week, it seems. that would take me off my current project for a bit, but game jams are fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the current code &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/commit/930805e2ba6031396e5df1f2e6c66d4ea3b6ebf5&quot;&gt;snapshot&lt;/a&gt; of my implementation for the day&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://websiteaboutmy.website/blog-assets/recurse-w2d4/space-invaders-demo/index.html&quot;&gt;Here are the built assets that can be played with on the website.&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W2D3</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w2d3/" />
    <updated>2025-02-26T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w2d3/</id>
    <content type="html">&lt;h1 id=&quot;recurse-center-w2d3&quot;&gt;Recurse center: W2D3&lt;/h1&gt;
&lt;p&gt;Today, I attempted to do a deep dive into some of the fundamentals of ECS architectures, and how perhaps this could be useful for layering into the game.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/compare/f968cc2198eb548095502eb99466d524c1c301ab...187a92e0ec867fe8e2e96cd5681baa00075ca34c&quot;&gt;Here is the diff&lt;/a&gt; of things I got done migrating from &amp;quot;naive, POJO&amp;quot; logic to &lt;a href=&quot;https://github.com/pmndrs/koota&quot;&gt;koota&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The promises for using this library/state architecture was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;composability of behaviors (&amp;quot;components&amp;quot;) at a per-entity level&lt;/li&gt;
&lt;li&gt;composability of these behaviors into &amp;quot;systems&amp;quot; that would dictate how components interact with each other&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The results we hope to get from this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fun, flexible ways to put these behaviors together as a game evolves&lt;/li&gt;
&lt;li&gt;Easy ways to refactor things as new &#39;concepts&#39; for components/systems emerge from the development project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the migration was pretty smooth. Spoke with &lt;a href=&quot;https://github.com/krispya&quot;&gt;krispya&lt;/a&gt; a bit about strategies used, asked questions about whether I was &#39;doing it right&#39;.&lt;/p&gt;
&lt;p&gt;Here is a snapshot build of the game in the current state &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/commit/187a92e0ec867fe8e2e96cd5681baa00075ca34c&quot;&gt;at this commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://websiteaboutmy.website/blog-assets/recurse-w2d3/space-invaders-demo/index.html&quot;&gt;Play &amp;quot;space invaders&amp;quot; progress at W2d3 here&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W2D1-2</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w2d1-2/" />
    <updated>2025-02-25T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w2d1-2/</id>
    <content type="html">&lt;h1 id=&quot;recurse-center-w2d1-2&quot;&gt;Recurse center: W2D1-2&lt;/h1&gt;
&lt;p&gt;These past two days, I&#39;ve been working on what I&#39;ve been calling &#39;building reps&#39; with building games and animation.&lt;/p&gt;
&lt;h2 id=&quot;w2d1-space-invaders-clone&quot;&gt;W2D1 - space invaders clone&lt;/h2&gt;
&lt;p&gt;On W2D1, started on a space invaders clone to get a feel for &lt;a href=&quot;https://github.com/pmndrs/koota&quot;&gt;koota&lt;/a&gt; as a state management solution for JavaScript based games in general. I started building it out using p5.js as the drawing layer. Based off my lessons on the last animation, I&#39;ve done a much better job distinguishing the simulation state and how that model moves over time, from the &#39;drawing&#39; actions that derive from changes to that state.&lt;/p&gt;
&lt;p&gt;Now that it&#39;s W2D2, here&#39;s &lt;a href=&quot;https://github.com/etgrieco/space-invaders-p5-koota/commit/f968cc2198eb548095502eb99466d524c1c301ab&quot;&gt;a quick snapshot&lt;/a&gt; for where I&#39;ve gotten so far. Integrating Koota hasn&#39;t quite worked out yet, but here&#39;s some reflections on at least distinguishing the simulation from the draw:&lt;/p&gt;
&lt;p&gt;I&#39;ve encapsulated the state + simulation into a lightweight object for now (perhaps, this should just be pure procedures? Not sure.)&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sceneId &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CRAWL_INTRO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simulation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;drawIntro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simulation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sceneId &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SPACE_INVADERS_GAME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simulation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;drawGame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simulation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gameSceneState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sceneId &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;END&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// etc.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows me to break up the different simulations happening into different &#39;scenes&#39; that run independently of each other.&lt;/p&gt;
&lt;p&gt;Right now, I&#39;m controlling the transitions between these scenes in less than optimal ways, by setting up an overly complex machine like so:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;gameSceneState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sceneId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CRAWL_INTRO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    simulation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;introSimulationFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;queueNextTick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        gameSceneState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            sceneId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SPACE_INVADERS_GAME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            simulation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;gameSimulationFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                p&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;queueNextTick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    gameSceneState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        sceneId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;END&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Definitely some cleanup and re-thinking I can do here; I basically came up with my own version of callback hell with what I have here. Trying to create something lightweight, without having to reach for a more robust solution like &lt;a href=&quot;https://xstate.js.org/&quot;&gt;xstate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also ended up publishing the &lt;a href=&quot;https://github.com/etgrieco/p5-vite-typescript-template&quot;&gt;P5, TypeScript, Vite template&lt;/a&gt;. I used this as the starting point for my space invaders game, so it was good to get that out of the way.&lt;/p&gt;
&lt;h2 id=&quot;w2d2-pairing-jam&quot;&gt;W2D2 - pairing jam&lt;/h2&gt;
&lt;p&gt;There was a pairing jam set up today for the entirety of the day. I ended up pairing with &lt;a href=&quot;https://github.com/rwhaling&quot;&gt;rwhaling&lt;/a&gt;. The goal there was 1) learn some React, 2) figure out how to get some kind of shared state between our &amp;quot;React world&amp;quot; and our P5.js world and 3) create some fun math-based animations.&lt;/p&gt;
&lt;p&gt;I learned a lot, especially on the #3 front. It was also gratifying to be able to &lt;a href=&quot;https://github.com/etgrieco/p5-vite-typescript-template&quot;&gt;use the template&lt;/a&gt; from the day prior to get some fast environment setup.&lt;/p&gt;
&lt;p&gt;We ended up with a finish product meeting our goals. It can be played &lt;a href=&quot;https://websiteaboutmy.website/p5-react-test/&quot;&gt;with here&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;p5-react-demo-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
  A demo of the animation using P5.js and React
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;p5-react-demo-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w2d1-2/p5-react-demo-web.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W1D4-5</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w1d4-5/" />
    <updated>2025-02-22T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w1d4-5/</id>
    <content type="html">&lt;h1 id=&quot;recurse-center-w1d4-and-w1d5&quot;&gt;Recurse center: W1D4 &amp;amp; W1D5&lt;/h1&gt;
&lt;h2 id=&quot;w1d4&quot;&gt;W1D4&lt;/h2&gt;
&lt;p&gt;Today was a lot more socially oriented; some things I talked about were &lt;a href=&quot;https://r3f.docs.pmnd.rs/getting-started/introduction&quot;&gt;React Three Fiber&lt;/a&gt; and the current &lt;a href=&quot;https://help.citibikenyc.com/hc/en-us/articles/360032341451-Ride-Citi-Bike-with-Lyft&quot;&gt;Lyft/Citibike relationship&lt;/a&gt; and other things about biking history in NY.&lt;/p&gt;
&lt;p&gt;I put about an hour improving upon the animation from &lt;a href=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/%22../recurse-w1d3.md%22&quot;&gt;the day before&lt;/a&gt;, then it was time for a series of technical presentations. Here, other folks from Recurse reflected on things they were working on. I saw someone else building mathematically-driven animations in &lt;a href=&quot;https://p5js.org/&quot;&gt;P5.js&lt;/a&gt;, (demo-able &lt;a href=&quot;https://codepen.io/rwhaling/pen/yyLONeY&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://codepen.io/rwhaling/pen/MYWywyK&quot;&gt;here&lt;/a&gt;); it was very cool to see all the fun ways the library could be applied and implemented.&lt;/p&gt;
&lt;h2 id=&quot;w1d5&quot;&gt;W1D5&lt;/h2&gt;
&lt;h2 id=&quot;working-on-and-completing-the-p5-js-animation-binary-sort&quot;&gt;Working on and &amp;quot;completing&amp;quot; the p5.js animation - binary sort&lt;/h2&gt;
&lt;p&gt;Today, I was able to be a bit more heads-down to get some traction on getting to a satisfying &#39;completion&#39; point on the binary search animation. As things entered the later &amp;quot;scenes&amp;quot;, code organization and state management was getting &lt;em&gt;very&lt;/em&gt; messy very fast.&lt;/p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https://github.com/etgrieco/recurse-binary-search-p5/blob/main/src/main.ts&quot;&gt;end-state file&lt;/a&gt; -- ~800 lines of typescript 😂&lt;/p&gt;
&lt;h2 id=&quot;the-animation-what-went-well&quot;&gt;The animation - what went well&lt;/h2&gt;
&lt;p&gt;The goal here was to make an animation that could sensibly demonstrate how binary sort works. The final product is viewable &lt;a href=&quot;https://websiteaboutmy.website/recurse-binary-search-p5/&quot;&gt;at this page.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instead of being a static animation, we are computing and rendering everything in real-time. It is not interactive, but it is slightly more programmatically made than a rendered animation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Picks 10 random numbers&lt;/li&gt;
&lt;li&gt;Sorts them&lt;/li&gt;
&lt;li&gt;Randomly selects one of the 10 numbers.&lt;/li&gt;
&lt;li&gt;Demonstrates how binary search works by working through the algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the animation is in 2d, but I did chose the &lt;a href=&quot;https://p5js.org/reference/p5/WEBGL/&quot;&gt;WEBGL rendering mode&lt;/a&gt;. This enables some three dimensional features, and in the animation itself you can even click and drag around to move the 3-D camera around the animation while it is playing.&lt;/p&gt;
&lt;h2 id=&quot;so-what-went-wrong&quot;&gt;So, what went wrong?&lt;/h2&gt;
&lt;p&gt;For this exercise, being fast-and loose was in many ways the point here. I wanted to see where things get messy, when it makes sense to modularize, and logically how I should be dividing my animation&#39;s &amp;quot;state management&amp;quot; work between the state that lives in &#39;objects&#39; vs the state that lives in &#39;scenes&#39;.&lt;/p&gt;
&lt;p&gt;Let&#39;s consider this, &lt;a href=&quot;https://www.oxfordreference.com/display/10.1093/acref/9780191826719.001.0001/q-oro-ed4-00003960#:~:text=Thomas%20Alva%20Edison%201847%E2%80%931931&amp;amp;text=I%20have%20not%20failed.,ways%20that%20won&#39;t%20work.&amp;amp;text=Waste%20is%20worse%20than%20loss.&quot;&gt;one of 10,000 failed attempts&lt;/a&gt; to manage state for a long-running animation. 💀 .&lt;/p&gt;
&lt;h3 id=&quot;some-lessons&quot;&gt;Some lessons&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Don&#39;t assume a single source of truth for all data&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In writing apps for the web, a golden rule is typically &#39;unify your single source of truth&#39;. Having duplicate versions of what is ultimately the same state is bad. This is so that if you ever have multiple parts of the app reflecting the same sort of data, you make sure they all stay in sync.  Wherever there needs to be &lt;em&gt;derived&lt;/em&gt; state from this data, it is important that we don&#39;t simply hold that in another part of state, but instead &#39;derive it&#39;.&lt;/p&gt;
&lt;p&gt;For example, let&#39;s say we have incoming messages as part of our app. Let&#39;s say we have aa global data store holding our data.&lt;/p&gt;
&lt;p&gt;Nearly all developers would say keep your store looking like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    messages: [
        {
            id: 1,
            content: &#39;Hello, there!&#39;,
            readStatus: true,
            timeStamp: &#39;2025-02-23T00:24:54.661Z&#39;,
            senderId: 1234
        },
        {
            id: 2,
            content: &#39;Hi again!&#39;,
            readStatus: true,
            timeStamp: &#39;2025-02-23T00:24:55.661Z&#39;,
            senderId: 1234
        },
        {
            id: 3,
            content: &#39;You there?&#39;,
            readStatus: true,
            timeStamp: &#39;2025-02-23T00:24:56.661Z&#39;,
            senderId: 1234
        },
    ],
    lastReadMessageId: 1,
    senders: [ ... ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&#39;d want to avoid adding any additional &#39;redundant&#39; data fields that our client would be responsible for managing, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// managing this as updatable, independently maintained client state is considered poor form
{
    unreadMessageCount: 2,
    lastMessageReadId: 2,
    highestPrioritySender: 1234
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason this is considered &#39;poor form&#39; is that by managing these values manually, we risk &#39;de-syncing&#39; our state over time. That is, you just got a new message. Did you remember to increment your &lt;code&gt;unreadMessageCount&lt;/code&gt;? Has your determination for the &lt;code&gt;highestPrioritySender&lt;/code&gt; changed? Where in your visual tree does the responsibility lie? What do we do if the &#39;derived&#39; state of &lt;code&gt;messages&lt;/code&gt; conflicts with the &#39;synchronized&#39; state of &lt;code&gt;unreadMessageCount&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;However, in animation, my intuitions about what is &#39;derived&#39; versus &#39;maintained&#39; client state are not as clear cut.&lt;/p&gt;
&lt;p&gt;Take this part of the animation for example:&lt;/p&gt;
&lt;p id=&quot;binary-search-multiple-numbers-example-desc&quot; class=&quot;visually-hidden&quot;&gt;
    Example animation where multiple numbers are simultaneously displayed. One fades in while the other fades out.
&lt;/p&gt;
&lt;video controls=&quot;&quot; height=&quot;360&quot; aria-describedby=&quot;binary-search-multiple-numbers-example-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w1d4-5/animation-example-multiple-numbers.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;Because our &lt;code&gt;draw&lt;/code&gt; loop is running continuously, for all frames in-between drawing each number, we have to be responsible for preserving the state of both the &lt;em&gt;ingoing&lt;/em&gt; and &lt;em&gt;outgoing&lt;/em&gt; numbers&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; textHighLowMid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
high&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    out&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
low&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    out&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
mid&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    out&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; satisfies Record&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; out&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then on top of this, the places to maintain where the current &lt;em&gt;actual&lt;/em&gt; state of our algorithm (as-is running under the hood) is also being maintained on their own as numbers&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; binarySearchState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    low&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    high&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    mid&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The challenge here becomes keeping all of these sources of truth in sync over time, and making sure that I am doing those at the correct &#39;points&#39; in the animation.&lt;/p&gt;
&lt;p&gt;I can already see how this challenge would carry over to game development. The &#39;simulation state&#39; of what is happening and the &#39;animation state&#39; of the same are connected, yet discrete concepts.&lt;/p&gt;
&lt;p&gt;Here are some ways I could imagine it playing out in a game; let&#39;s say that in a space invaders game, an enemy dies, but it takes about one second of animation for the spaceship death to animate.&lt;/p&gt;
&lt;p&gt;Over time, we cannot simply rely on one state variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    isDead: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But perhaps multiple&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    isDead: true
    deathTime: &#39;2025-02-23T00:24:56.661Z&#39;,
    isCollisionActive: true 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and all of these data points can have different significances to the game logic depending on the game rules being implemented.&lt;/p&gt;
&lt;p&gt;For example, while the ship is dead, do we consider it still an entity that can &#39;stop&#39; bullets while the ship destruction animation is active?&lt;/p&gt;
&lt;p&gt;Getting these techniques right is definitely something I&#39;m not sure about, but a wrong way I did learn was keeping these states in two different containers, and arbitrarily &#39;updating&#39; these over time as I worked through the logic and animation of the scene.&lt;/p&gt;
&lt;p&gt;There&#39;s probably something here to keep in mind about keeping &#39;animation state&#39; and &#39;simulation state&#39; separated from each other; they must run over the same timeline, and clearly the way an animation state must update &lt;em&gt;depends&lt;/em&gt; upon the &#39;simulation state&#39;, but the logical machine that couples these two state containers also needs its own rules, and being able to follow and update those rules apart from the simulation/animation states themselves becomes really important for an animation that we want to tweak over time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definitions are hard&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at the animation in the current snapshot.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/1NP7H3DuQA-1438.avif 1438w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/1NP7H3DuQA-1438.webp 1438w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/1NP7H3DuQA-1438.png&quot; alt=&quot;a static part of the animation&quot; width=&quot;1438&quot; height=&quot;294&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;When I got to this stage of writing the animation, I was tasked with coming up with how to draw the &#39;outlines&#39; per box.&lt;/p&gt;
&lt;p&gt;At first, I had a function that basically looked like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function drawBoxWithOutlines(posX, posY, outlineColor) {
    // draw the box with the outline....
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But then, I had the fun idea that these outlines should &#39;move&#39; to demonstrate what to be done when a variable tracking our high, mid, and low values were to change&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/zIiWUeaFJz-1478.avif 1478w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/zIiWUeaFJz-1478.webp 1478w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://websiteaboutmy.website/blog/recurse-w1d4-5/zIiWUeaFJz-1478.png&quot; alt=&quot;a moving outline in the animation&quot; width=&quot;1478&quot; height=&quot;288&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Oh dear -- &lt;code&gt;drawBoxWithOutlines&lt;/code&gt; is not the correct abstraction at all! The outlines and boxes are actually to be drawn completely separate from each other. Instead, what we care about is maintaining the current position of the boxes and their outlines independently; then, over time we have to transition from its current location to its new location:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; movingObj&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posX&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; targetObj&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; posX&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;midObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; needleToFind&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;high &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// move the outline&lt;/span&gt;
    targetObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sortedNumberObjs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;high&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    movingObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; outlineObjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;high&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    movingObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lerp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movingObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; targetObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;midObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; needleToFind&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;low &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mid &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// move the outline&lt;/span&gt;
    targetObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sortedNumberObjs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;binarySearchState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;low&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    movingObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; outlineObjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;low&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    movingObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lerp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movingObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; targetObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;midObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; needleToFind&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;found it!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// deal with this later&lt;/span&gt;
    animationPhase &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;END&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Certainly not the prettiest code as-is, but it got the job done for what I needed.&lt;/p&gt;
&lt;p&gt;In this case, our &lt;code&gt;movingObj&lt;/code&gt; was tracking our &lt;code&gt;outline&lt;/code&gt; object position state, whereas &lt;code&gt;targetObj&lt;/code&gt; was a reference to the box object it was moving towards.&lt;/p&gt;
&lt;p&gt;We then put some basic end-conditions to understand when it is appropriate to advance to the next phase&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isBasicallyEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; movingObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;posX&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// transition to the next animation sequence&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I think the take-home lesson is -- double check your assumptions about what objects are necessarily grouped with what. Is this a &amp;quot;box with an outline&amp;quot; or a &amp;quot;box&amp;quot; and an &amp;quot;outline&amp;quot;?&lt;/p&gt;
&lt;p&gt;Anyway, I&#39;m happy with this amount of reflection.&lt;/p&gt;
&lt;p&gt;We&#39;ll see if it helps for future work!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recurse: W1D3</title>
    <link href="https://websiteaboutmy.website/blog/recurse-w1d3/" />
    <updated>2025-02-19T00:00:00Z</updated>
    <id>https://websiteaboutmy.website/blog/recurse-w1d3/</id>
    <content type="html">&lt;h1 id=&quot;recurse-center-w1d3&quot;&gt;Recurse center: W1D3&lt;/h1&gt;
&lt;p&gt;Some things I did and worked on at the Hub:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Commuted downtown by bike (UWS -&amp;gt; Downtown Brooklyn)&lt;/li&gt;
&lt;li&gt;Went a couple lessons into &lt;a href=&quot;https://frontendmasters.com/courses/algorithms/&quot;&gt;The last algorithms course you&#39;ll need&lt;/a&gt;, practiced some binary search&lt;/li&gt;
&lt;li&gt;Realized I needed some extra practice on groking binary search, decided to try some animating&lt;/li&gt;
&lt;li&gt;Went with p5.js, since it&#39;s a good starting point for the skills I have
&lt;ul&gt;
&lt;li&gt;Realized that the &lt;a href=&quot;https://editor.p5js.org/&quot;&gt;p5.js&lt;/a&gt; editor is cool, but lacks type-checking that I am used to at this point&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@types/p5&quot;&gt;the types package&lt;/a&gt; exists, and next steps was to get it working in a nice hot-reloading environment&lt;/li&gt;
&lt;li&gt;Success! Here&#39;s &lt;a href=&quot;https://github.com/etgrieco/recurse-binary-search-p5&quot;&gt;my project&lt;/a&gt; setting up the animation in p5
&lt;ul&gt;
&lt;li&gt;Maybe turn it into a template repository? 🤔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ended the day with listening to some &#39;non-programming presentations&#39; at the Recurse center, where I heard people present about biking across New Zealand, &lt;a href=&quot;https://youtu.be/ECoWZtFO-pU?si=P_KvVAKIDMrppXLs&amp;amp;t=55&quot;&gt;eating lightbulbs&lt;/a&gt;, role-play STEM education, and how to &lt;a href=&quot;https://www.youtube.com/watch?v=fvM8ow6zNw4&quot;&gt;fairly cut a cake&lt;/a&gt; -- or any kind of divisible resource -- fairly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;working-on-the-p5-js-animation&quot;&gt;Working on the P5.js animation&lt;/h2&gt;
&lt;p&gt;Animation and graphical work is pretty new to me.&lt;/p&gt;
&lt;p&gt;Here&#39;s what I got done for the animation so far:&lt;/p&gt;
&lt;p id=&quot;binary-search-progress-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
    W1D3 progress on a binary search illustration
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;binary-search-progress-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w1d3/end-of-w1d3-binary-search-progress.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/etgrieco/recurse-binary-search-p5/tree/3829817bfb805ed59d01263369c2770fb564c3d9&quot;&gt;commit&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As I was going through:&lt;/p&gt;
&lt;p&gt;I realized that it was superior to structure my code in a (very light)&#39;state-machine&#39; pattern&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/1Ibfd9BzIP-728.avif 728w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/1Ibfd9BzIP-728.webp 728w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/1Ibfd9BzIP-728.png&quot; alt=&quot;Using a series of boolean flags to manage state through progress in an animation&quot; width=&quot;728&quot; height=&quot;228&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;After&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/ESnxlDuoCP-596.avif 596w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/ESnxlDuoCP-596.webp 596w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/ESnxlDuoCP-596.png&quot; alt=&quot;Using string literals as markers of discrete states to gate progress through animation phases&quot; width=&quot;596&quot; height=&quot;248&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;And while I &lt;em&gt;could&lt;/em&gt; do some work to tightly couple these state enums to the data pieces that are relevant just to that &#39;scene&#39;, for now I just used comments to organize it: (&lt;a href=&quot;https://github.com/etgrieco/recurse-binary-search-p5/blob/3829817bfb805ed59d01263369c2770fb564c3d9/src/main.ts#L35-L58&quot;&gt;see lines&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/KHe1dOr0c--910.avif 910w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/KHe1dOr0c--910.webp 910w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://websiteaboutmy.website/blog/recurse-w1d3/KHe1dOr0c--910.png&quot; alt=&quot;Example of organizing state using some basic comments&quot; width=&quot;910&quot; height=&quot;890&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Finally, the usefulness of this state technique definitely came to life when I could easy &#39;jump scenes&#39; in order to debug and tweak certain parts of my animation. This combined very well with the TypeScript + hot-reloading setup:&lt;/p&gt;
&lt;p id=&quot;hot-reload-video-desc&quot; class=&quot;visually-hidden&quot;&gt;
TypeScript + hot-reloading setup so that I can quickly iterate on visual tweaks to the animation
&lt;/p&gt;
&lt;video controls=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot; aria-describedby=&quot;hot-reload-video-desc&quot;&gt;
    &lt;source src=&quot;https://websiteaboutmy.website/blog-assets/recurse-w1d3/example-hot-reload-and-tweak-in-animation-scene.mp4&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;
&lt;p&gt;And that&#39;s definitely something I always value -- put in a little bit of effort for the most useful kind of fast-feedback possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast code feedback via TypeScript; fail at compilation, not runtime!&lt;/li&gt;
&lt;li&gt;Fast visual feedback via hot-reloading&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some hopes for tomorrow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve (finish?) the animation to show how binary search works -- &lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/Search.html&quot;&gt;something like this page&lt;/a&gt;, but with my own twist&lt;/li&gt;
&lt;li&gt;Consider if its worth to publish a basic vite + p5.js setup, since I came up with my own &#39;flavor&#39; of getting the beginning working (this &lt;a href=&quot;https://dev.to/tendonnman/how-to-use-p5js-with-typescript-and-webpack-57ae&quot;&gt;blogpost&lt;/a&gt; for webpack got me started, with some adjustments)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>